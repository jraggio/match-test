The homework for iOS is relatively simple. We want you to build a matching game using the flickr public api. We've provided an api key to use as well as links to the api call we would like you to use and the documentation for the api.

The task is to build a basic memory game. Display a 4x4 grid of the default image of your choice. Allow the user to flip two images at a time to display the images you've fetched. If the images match, leave them flipped over, otherwise flip them back. When the user has matched all the images, display the number of flips it took and allow them to restart the game with new images.

Match game/Memory/Pairs is described as follows:
Concentration, also known as Match Match, Memory, Pelmanism, Shinkei-suijaku, Pexeso or simply Pairs, is a card game in which all of the cards are laid face down on a surface and two cards are flipped face up over each turn. The object of the game is to turn over pairs of matching cards.

Resources:
Flickr api key: 5423dbab63f23a62ca4a986e7cbb35e2
Flickr api docs:
These are the two calls you'll need:
https://www.flickr.com/services/api/flickr.photos.getRecent.html
https://www.flickr.com/services/api/flickr.photos.getSizes.html

Goals:
All images need to be tagged with "kitten" and you should use the square size
4x4 grid of images with a placeholder until flipped
game is tracking and aware of victory state
must use UIKit not SpriteKit to build and manage game
single page app
works in XCode simulator (or on device, but will probably be tested in simulator, which device you build for is not of concern)
built in Swift
Retrieve JSON from the api (not XML or JSONP)

Bonus Points:
2 players
animations
larger grids (being able to choose between game size)

Deliverables:
A zip of the project in a runnable state.


--------------------------------

Assumptions / Notes:
iPhone only and in portrait only.  UICollectionView and alternate display class would make a landscape version pretty easy and I might add that, but Matt said not to spend too much time on the app.

Will reload images from Flickr each time a new game is started so that we might get new images as some are added.  I'd imagine kittens are popular.  In other words, not caching the images on purpose.

Using UICollectionView to help with layout and is a lot cleaner than a bunch of static buttons or images.  This also makes it much easier to expand the game later to support more than 16 cards.

Game flow:
Put a full screen activity indicator showing that the deck is loading and shuffling (this is when the Flickr api is called and we don't want the user tapping cards yet)
Start with set of cards displayed in grid with their backs showing
Select first card and turn it over revealing an image
Select second card and turn it over revealing second image and checks for a match with the first card
Selecting a card that is already turned over, or a card beyond the second has no effect
If match, hide the cards after some delay.  This way they can no longer be selected, or confuse the user.  Increment the match count.
Check match count to see if it is deck / 2.  If it is display the endgame message with the final score.
If not a match, increment the wrong pairs count, update the display, and after some delay turn them back over again to their backs.  User needs to be able to see what the second card was.
If final match is found, the final score is displayed in an alert and the user is given a choice of difficulty for the next game.

Tapping the deal button will abandon the current game and allow the user to select a new or same difficulty to start a new game
 User may cancel if they choose.  This button should also be unavailable while the deck is loading.

The getRecent API call does not appear to support searching for tags, so I used the search API instead and included extras=url_q to include the large square URL for every item

--------------------------------

Todo:

Use Flickr API in loadDeck instead of hard coded puppy images to rerieve specified number of images (deckSize / 2 are needed)
https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=5423dbab63f23a62ca4a986e7cbb35e2&tags=kitten&sort=relevance&safe_search=1&media=photos&extras=url_q&format=json&nojsoncallback=1

Use the first N items retrned or select N at random from the page of 100 that comes back?

Probably OK to use the synchronous URL calls since I know that all cards will be loaded in a worker thread?

I'm assuming they don't all have squares available and I need to check?

Increase the difficulty values (8, 16, 24/32?) once I am no longer using hard coded puppy images - probably safe to assume that there are more than 32 kitten photos? ;-)

Need an app icon?

Need 2x and 3x images? Use the web site found on Chris' video if so

Bonus: Add two player option  prob not going to bother with this, but will document how it would have been done

Do not include .git when zipping up to submit?






